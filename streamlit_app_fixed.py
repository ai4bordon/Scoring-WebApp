import streamlit as st
from openai import OpenAI
from parse_hh import get_html, extract_vacancy_data, extract_resume_data

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
try:
    api_key = st.secrets["OPENAI_API_KEY"]
    if not api_key or api_key == "your-openai-api-key-here":
        st.error("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –≤ —Ñ–∞–π–ª `.streamlit/secrets.toml`")
        st.info("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–º. –≤ —Ñ–∞–π–ª–µ `README_SECRETS.md`")
        st.stop()
    client = OpenAI(api_key=api_key)
except Exception as e:
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤!")
    st.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.streamlit/secrets.toml` –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ `secrets.toml.example`")
    st.info(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    st.stop()

SYSTEM_PROMPT = """
–ü—Ä–æ—Å–∫–æ—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ—è—Å–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É.
–û—Ç–¥–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ (–ø–æ–Ω—è—Ç–Ω–æ –ª–∏, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∏—Ö —Ä–µ—à–∞–ª?). –≠—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ - –Ω–∞–º –≤–∞–∂–Ω–æ –Ω–∞–Ω–∏–º–∞—Ç—å —Ç–∞–∫–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
–ü–æ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 10.
""".strip()

def request_gpt(system_prompt, user_prompt):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        max_tokens=1000,
        temperature=0,
    )
    return response.choices[0].message.content

# UI
st.title('Scoring WebApp')

job_description = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é')
cv = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ')

if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"):
    with st.spinner("–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT..."):
        try:
            job_response = get_html(job_description)
            resume_response = get_html(cv)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ Response –æ–±—ä–µ–∫—Ç—ã, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∏
            if hasattr(job_response, 'text'):
                job_html = job_response.text
            else:
                job_html = str(job_response)

            if hasattr(resume_response, 'text'):
                resume_html = resume_response.text
            else:
                resume_html = str(resume_response)

            job_text = extract_vacancy_data(job_response)
            resume_text = extract_resume_data(resume_response)

            prompt = f"# –í–ê–ö–ê–ù–°–ò–Ø\n{job_text}\n\n# –†–ï–ó–Æ–ú–ï\n{resume_text}"
            response = request_gpt(SYSTEM_PROMPT, prompt)

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            st.markdown(response)

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
